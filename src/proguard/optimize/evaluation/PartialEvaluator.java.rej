***************
*** 71,76 ****
      private boolean[]                generalizedContexts  = new boolean[ClassConstants.TYPICAL_CODE_LENGTH];
      private int[]                    evaluationCounts     = new int[ClassConstants.TYPICAL_CODE_LENGTH];
      private boolean                  evaluateExceptions;
  
      private final BasicBranchUnit    branchUnit;
      private final BranchTargetFinder branchTargetFinder;
--- 71,77 ----
      private boolean[]                generalizedContexts  = new boolean[ClassConstants.TYPICAL_CODE_LENGTH];
      private int[]                    evaluationCounts     = new int[ClassConstants.TYPICAL_CODE_LENGTH];
      private boolean                  evaluateExceptions;
+     private int                      codeLength;
  
      private final BasicBranchUnit    branchUnit;
      private final BranchTargetFinder branchTargetFinder;
***************
*** 1111,1140 ****
       */
      private void initializeArrays(CodeAttribute codeAttribute)
      {
-         int codeLength = codeAttribute.u4codeLength;
  
          // Create new arrays for storing information at each instruction offset.
-         if (variablesAfter.length < codeLength)
          {
              // Create new arrays.
-             branchOriginValues  = new InstructionOffsetValue[codeLength];
-             branchTargetValues  = new InstructionOffsetValue[codeLength];
-             variablesBefore     = new TracedVariables[codeLength];
-             stacksBefore        = new TracedStack[codeLength];
-             variablesAfter      = new TracedVariables[codeLength];
-             stacksAfter         = new TracedStack[codeLength];
-             generalizedContexts = new boolean[codeLength];
-             evaluationCounts    = new int[codeLength];
          }
          else
          {
-             // Reset the arrays.
-             Arrays.fill(branchOriginValues,  null);
-             Arrays.fill(branchTargetValues,  null);
-             Arrays.fill(generalizedContexts, false);
-             Arrays.fill(evaluationCounts,    0);
  
-             for (int index = 0; index < codeLength; index++)
              {
                  if (variablesBefore[index] != null)
                  {
--- 1112,1141 ----
       */
      private void initializeArrays(CodeAttribute codeAttribute)
      {
+         int newCodeLength = codeAttribute.u4codeLength;
  
          // Create new arrays for storing information at each instruction offset.
+         if (branchOriginValues.length < newCodeLength)
          {
              // Create new arrays.
+             branchOriginValues  = new InstructionOffsetValue[newCodeLength];
+             branchTargetValues  = new InstructionOffsetValue[newCodeLength];
+             variablesBefore     = new TracedVariables[newCodeLength];
+             stacksBefore        = new TracedStack[newCodeLength];
+             variablesAfter      = new TracedVariables[newCodeLength];
+             stacksAfter         = new TracedStack[newCodeLength];
+             generalizedContexts = new boolean[newCodeLength];
+             evaluationCounts    = new int[newCodeLength];
          }
          else
          {
+             // Reset the old arrays.
+             Arrays.fill(branchOriginValues,  0, codeLength, null);
+             Arrays.fill(branchTargetValues,  0, codeLength, null);
+             Arrays.fill(generalizedContexts, 0, codeLength, false);
+             Arrays.fill(evaluationCounts,    0, codeLength, 0);
  
+             for (int index = 0; index < newCodeLength; index++)
              {
                  if (variablesBefore[index] != null)
                  {
